package com.example.demo.Controller;

import com.example.demo.DTO.CouponDTO;
import com.example.demo.DTO.RoomsDTO;
import com.example.demo.Service.CouponService;
import com.example.demo.Service.RoomService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

@RestController
@RequestMapping("/dialogflow")
public class DialogflowController {

    @Autowired
    private CouponService couponService;

    @Autowired
    private RoomService roomService;

    @PostMapping
    public Map<String, Object> handleRequest(@RequestBody Map<String, Object> payload) {
        Map<String, Object> responseJson = new HashMap<>();

        if (payload == null || !payload.containsKey("queryResult")) {
            responseJson.put("fulfillmentText", "‚ùå Y√™u c·∫ßu kh√¥ng h·ª£p l·ªá.");
            return responseJson;
        }

        Map<String, Object> queryResult = (Map<String, Object>) payload.get("queryResult");
        Map<String, Object> intent = (Map<String, Object>) queryResult.get("intent");

        if (intent == null || !intent.containsKey("displayName")) {
            responseJson.put("fulfillmentText", "‚ùå Kh√¥ng th·ªÉ x√°c ƒë·ªãnh intent.");
            return responseJson;
        }

        String displayName = (String) intent.get("displayName");

        switch (displayName) {
            case "GetCoupon":
                responseJson.put("fulfillmentText", getCouponDetails());
                break;
            case "checkAvailableRooms":
                Map<String, Object> parameters = (Map<String, Object>) queryResult.get("parameters");
                if (parameters != null) {
                    Object guestsObject = parameters.get("numberOfGuests");
                    if (guestsObject instanceof Number) {
                        int numberOfGuests = ((Number) guestsObject).intValue();
                        responseJson = getAvailableRooms(numberOfGuests); // S·ª≠ d·ª•ng JSON rich message
                    } else {
                        responseJson.put("fulfillmentText", "‚ùå S·ªë ng∆∞·ªùi kh√¥ng h·ª£p l·ªá.");
                    }
                } else {
                    responseJson.put("fulfillmentText", "‚ùå Kh√¥ng th·ªÉ l·∫•y th√¥ng tin s·ªë ng∆∞·ªùi.");
                }
                break;
            default:
                responseJson.put("fulfillmentText", "‚ùå Kh√¥ng x√°c ƒë·ªãnh ƒë∆∞·ª£c y√™u c·∫ßu.");
        }

        return responseJson;
    }

    private String getCouponDetails() {
        List<CouponDTO> coupons = couponService.findCouponsByExpiryDateCurrent(); // L·∫•y danh s√°ch coupon

        if (coupons != null && !coupons.isEmpty()) {
            CouponDTO coupon = coupons.get(0); // L·∫•y coupon ƒë·∫ßu ti√™n

            // T·∫°o th√¥ng ƒëi·ªáp
            return String.format(
                    "B·∫°n h√£y √°p m√£ gi·∫£m gi√° d∆∞·ªõi ƒë√¢y ƒë·ªÉ nh·∫≠n ∆∞u ƒë√£i: \n" +
                            "üéâ M√£: %s\n" +
                            "üìâ Gi·∫£m gi√°: %.2f%%\n" +
                            "‚è≥ Ng√†y h·∫øt h·∫°n: %s",
                    coupon.getCode(),
                    coupon.getDiscountPercentage(),
                    coupon.getExpiryDate()
            );
        } else {
            // Th√¥ng ƒëi·ªáp kh√¥ng c√≥ coupon
            return "‚ùå Kh√¥ng c√≥ th√¥ng tin m√£ gi·∫£m gi√° n√†o.";
        }
    }

    private Map<String, Object> getAvailableRooms(int numberOfGuests) {
        List<RoomsDTO> availableRooms = roomService.findAvailableRooms(numberOfGuests);
        Map<String, Object> responseJson = new HashMap<>();

        if (availableRooms != null && !availableRooms.isEmpty()) {
            List<List<Map<String, Object>>> richMessages = new ArrayList<>();

            for (RoomsDTO room : availableRooms) {
                List<Map<String, Object>> card = new ArrayList<>();
                Map<String, Object> cardDetails = new HashMap<>();
                cardDetails.put("title", room.getName());
                cardDetails.put("subtitle", String.format("Gi√°: %.2f VNƒê | S·ªë gi∆∞·ªùng: %d | Di·ªán t√≠ch: %.1f m¬≤",
                        room.getPrice(), room.getBed(), room.getSize()));
                cardDetails.put("imageUri","https://m.media-amazon.com/images/I/71oqfuWhjeL.jpg");
                cardDetails.put("buttons", List.of(
                        Map.of("text", "Xem chi ti·∫øt", "postback", "https://localhost:8080/rooms/" + room.getRoomNumber())
                ));

                card.add(Map.of("card", cardDetails));
                richMessages.add(card);
            }

            responseJson.put("fulfillmentMessages", richMessages);
        } else {
            responseJson.put("fulfillmentText", "‚ùå Kh√¥ng c√≥ ph√≤ng n√†o c√≤n tr·ªëng cho " + numberOfGuests + " ng∆∞·ªùi.");
        }

        return responseJson;
    }
}
